# Generated by Django 3.2.13 on 2023-03-21 07:19

from django.db import migrations
import django.db.models.deletion
import django.db.models.manager
import salesforce.fields


class Migration(migrations.Migration):

    dependencies = [
        ('usermanagement_api', '0002_auto_20230317_1345'),
        ('auction_api', '0001_initial'),
        ('opscentre_usermanagement_api', '0005_auto_20230318_0041'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceRq',
            fields=[
                ('id', salesforce.fields.SalesforceAutoField(auto_created=True, db_column='Id', primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time_stamp', salesforce.fields.DateTimeField(db_column='createTimeStamp__c')),
                ('detailed_notes', salesforce.fields.TextField(blank=True, db_column='Education__c', null=True)),
                ('priority', salesforce.fields.CharField(blank=True, choices=[('Critical', 'Critical'), ('High', 'High'), ('Moderate', 'Moderate'), ('Low', 'Low'), ('Vey Low', 'Very Low')], db_column='Priority__c', max_length=255, null=True, verbose_name='Priority')),
                ('short_desc', salesforce.fields.CharField(blank=True, db_column='ShortDesc__c', max_length=255, null=True)),
                ('status', salesforce.fields.CharField(choices=[('Resolved', 'Resolved'), ('Identified', 'Identified'), ('Assigned', 'Assigned')], db_column='Status__c', max_length=255, verbose_name='Status')),
                ('update_time_stamp', salesforce.fields.DateTimeField(db_column='updateTimeStamp__c')),
                ('assigned_to', salesforce.fields.ForeignKey(db_column='OpsTeam__c', on_delete=django.db.models.deletion.DO_NOTHING, to='opscentre_usermanagement_api.opsteam')),
                ('auction', salesforce.fields.ForeignKey(db_column='Auction__c', on_delete=django.db.models.deletion.DO_NOTHING, to='auction_api.auction')),
                ('candidate', salesforce.fields.ForeignKey(db_column='Candidate__c', on_delete=django.db.models.deletion.DO_NOTHING, to='usermanagement_api.candidate')),
                ('recruiter', salesforce.fields.ForeignKey(db_column='ContactId', on_delete=django.db.models.deletion.DO_NOTHING, to='usermanagement_api.contact', verbose_name='Contact ID')),
            ],
            options={
                'verbose_name': 'ServiceRq',
                'verbose_name_plural': 'ServiceRqs',
                'db_table': 'ServiceRq__c',
                'abstract': False,
                'base_manager_name': 'base_manager',
            },
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SR_comments',
            fields=[
                ('id', salesforce.fields.SalesforceAutoField(auto_created=True, db_column='Id', primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', salesforce.fields.TextField(blank=True, db_column='Comment__c', null=True)),
                ('time_stamp', salesforce.fields.DateTimeField(db_column='TimeStamp__c')),
                ('candidate', salesforce.fields.ForeignKey(db_column='Candidate__c', on_delete=django.db.models.deletion.DO_NOTHING, to='usermanagement_api.candidate')),
                ('ops_user', salesforce.fields.ForeignKey(db_column='OpsTeam__c', on_delete=django.db.models.deletion.DO_NOTHING, to='opscentre_usermanagement_api.opsteam')),
                ('recruiter', salesforce.fields.ForeignKey(db_column='ContactId', on_delete=django.db.models.deletion.DO_NOTHING, to='usermanagement_api.contact', verbose_name='Contact ID')),
                ('service_rq', salesforce.fields.ForeignKey(blank=True, db_column='ServiceRq__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='opscentre_usermanagement_api.servicerq')),
            ],
            options={
                'verbose_name': 'Srcomments',
                'verbose_name_plural': 'Srcomments',
                'db_table': 'SR_comments__c',
                'abstract': False,
                'base_manager_name': 'base_manager',
            },
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
