from django.db import models

from usermanagement_api.models import *

class Auction(models.Model):
    #auction_id = models.CharField(db_column='Id__c', max_length=1300, sf_read_only=models.READ_ONLY, blank=True)
    auction_id = models.CharField(db_column='Auction_Id__c', max_length=1300, verbose_name='Auction Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cand_id = models.CharField(db_column='cand_id__c', max_length=1300, verbose_name='cand_id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    #owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    #is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    #name = models.CharField(db_column='Name', max_length=80, verbose_name='Auction Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    #created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='auction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    #last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='auction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    role = models.CharField(db_column='Role__c', max_length=255, choices=[('Software Engineer', 'Software Engineer'), ('Senior Software Engineer', 'Senior Software Engineer'), ('Lead Engineer', 'Lead Engineer'), ('Senior Lead Engineer', 'Senior Lead Engineer')], blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    #name = models.CharField(db_column='Name',max_length=80, sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    auction_end_date = models.DateField(db_column='Auction_End_Date__c', verbose_name='Auction End Date', blank=True, null=True)
    base_bid = models.DecimalField(db_column='Base_Bid__c', max_digits=18, decimal_places=0, verbose_name='Base Bid', blank=True, null=True)
    auction_stage = models.CharField(db_column='Auction_Stage__c', max_length=255, verbose_name='Auction Stage', default=models.DefaultedOnCreate('Draft'), choices=[('Draft', 'Draft'), ('Manager Approval', 'Manager Approval'), ('Not Approved', 'Not Approved'), ('Auction Active', 'Auction Active'), ('Vetting', 'Vetting'), ('Candidate Hired', 'Candidate Hired'), ('Auction Failed', 'Auction Failed'), ('Auction Finalized', 'Auction Finalized')], blank=True, null=True)
    candidate_profile = models.ForeignKey(CandidateProfile, models.DO_NOTHING, db_column='Candidate_Profile__c', verbose_name='Candidate Profile')
    manager_approval = models.BooleanField(db_column='Manager_Approval__c', verbose_name='Manager Approval', default=models.DefaultedOnCreate(False))
    auction_live_date = models.DateField(db_column='Auction_Live_Date__c', verbose_name='Auction Live Date', blank=True, null=True)
    candidate = models.ForeignKey(Candidate, models.DO_NOTHING, db_column='Candidate__c', blank=True, null=True)
    recruiter = models.ForeignKey('User', models.DO_NOTHING, db_column='Recruiter__c', related_name='auction_recruiter_set', blank=True, null=True)

    #employer_del = models.ForeignKey('Employer', models.DO_NOTHING, db_column='Employer_del__c', verbose_name='Employer', blank=True, null=True)
    increment_amount = models.DecimalField(db_column='Increment_Amount__c', max_digits=18, decimal_places=0, verbose_name='Increment Amount', blank=True, null=True)
    #candidate_id = models.CharField(db_column='Candidate_Id__c', max_length=1300, verbose_name='Candidate Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latest_bid = models.DecimalField(db_column='Latest_Bid__c', max_digits=18, decimal_places=0, verbose_name='Latest Bid', blank=True, null=True)    
    class Meta(models.Model.Meta):
        db_table = 'Auction__c'
        verbose_name = 'Auction'
        verbose_name_plural = 'Auctions'
        
        # keyPrefix = 'a01'

class Bid(models.Model):
    #owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    #is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    #name = models.CharField(db_column='Name', max_length=80, verbose_name='Bid', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    #created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='bid_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    #last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='bid_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    #system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    #last_activity_date = models.DateField(db_column='LastActivityDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    #last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    #last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # Below will be contact and for using Name of Company-- contact wale table se parse karenge uspe
    #employer_profile = models.ForeignKey(EmployerProfile, models.DO_NOTHING, db_column='Employer_Profile__c', verbose_name='Employer Profile')
    auction = models.ForeignKey(Auction, models.DO_NOTHING, db_column='Auction__c',related_name='bid_details')
    current_bid = models.DecimalField(db_column='Current_Bid__c', max_digits=18, decimal_places=2, verbose_name='Current Bid', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bid_stage = models.CharField(db_column='Bid_Stage__c', max_length=255, verbose_name='Bid Stage', choices=[('Created', 'Created'), ('Interview', 'Interview'), ('Bid Won', 'Bid Won'), ('Bid lost', 'Bid lost')], blank=True, null=True)
    bid_value = models.DecimalField(db_column='Bid_Value__c', max_digits=18, decimal_places=0, verbose_name='Bid Value')
    offer_accepted = models.CharField(db_column='Offer_Accepted__c', max_length=255, verbose_name='Offer Accepted', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    offer_rolled = models.CharField(db_column='Offer_Rolled__c', max_length=255, verbose_name='Offer Rolled', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    # employer = models.ForeignKey(Employer, models.DO_NOTHING, db_column='Employer__c', blank=True, null=True)
    rank = models.DecimalField(db_column='Rank__c', max_digits=18, decimal_places=0, blank=True, null=True)
    #bid_id = models.CharField(db_column='Id__c', max_length=1300, sf_read_only=models.READ_ONLY, blank=True, null=False)
    bid_id = models.CharField(db_column='Bid_Id__c', max_length=1300, verbose_name='Bid Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    #employer_detail = models.ForeignKey(Account, models.DO_NOTHING, db_column='Employer_Detail__c', verbose_name='Employer Detail', blank=True, null=True)
    employer_detail = models.ForeignKey(Account, models.DO_NOTHING, db_column='Employer_Details__c', verbose_name='Employer Details', blank=True, null=True)
    employer_team = models.ForeignKey(Contact, models.DO_NOTHING, db_column='Employer_Team__c', verbose_name='Employer Team', blank=True, null=True)
    remarks_by_employer = models.TextField(db_column='Remarks_By_Employer__c', verbose_name='Remarks By Employer', blank=True, null=True)
    remarks_by_candidate = models.TextField(db_column='Remarks_By_Candidate__c', verbose_name='Remarks By Candidate', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Bid__c'
        verbose_name = 'Bid'
        verbose_name_plural = 'Bids'
        ordering = ['-bid_value']
        # keyPrefix = 'a04'

class Favourite(models.Model):
    # is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    # name = models.CharField(db_column='Name', max_length=80, verbose_name='Favourites Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    # created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='favourite_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    # last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='favourite_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    # system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    # last_activity_date = models.DateField(db_column='LastActivityDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    employer_details = models.ForeignKey(Account, models.DO_NOTHING, db_column='Employer_Details__c', verbose_name='Employer Details', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    auction = models.ForeignKey(Auction, models.DO_NOTHING, db_column='Auction__c', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 1
    class Meta(models.Model.Meta):
        db_table = 'Favourite__c'
        verbose_name = 'Favourite'
        verbose_name_plural = 'Favourites'
        # keyPrefix = 'a01'


class User(models.Model):
    username = models.CharField(db_column='Username', max_length=80)
    last_name = models.CharField(db_column='LastName', max_length=80)
    first_name = models.CharField(db_column='FirstName', max_length=40, blank=True, null=True)
    middle_name = models.CharField(db_column='MiddleName', max_length=40, blank=True, null=True)
    suffix = models.CharField(db_column='Suffix', max_length=40, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    company_name = models.CharField(db_column='CompanyName', max_length=80, blank=True, null=True)
    division = models.CharField(db_column='Division', max_length=80, blank=True, null=True)
    department = models.CharField(db_column='Department', max_length=80, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, blank=True, null=True)
    street = models.TextField(db_column='Street', blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField(db_column='Email')
    email_preferences_auto_bcc = models.BooleanField(db_column='EmailPreferencesAutoBcc', verbose_name='AutoBcc')
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(db_column='EmailPreferencesAutoBccStayInTouch', verbose_name='AutoBccStayInTouch')
    email_preferences_stay_in_touch_reminder = models.BooleanField(db_column='EmailPreferencesStayInTouchReminder', verbose_name='StayInTouchReminder')
    sender_email = models.EmailField(db_column='SenderEmail', verbose_name='Email Sender Address', blank=True, null=True)
    sender_name = models.CharField(db_column='SenderName', max_length=80, verbose_name='Email Sender Name', blank=True, null=True)
    signature = models.TextField(db_column='Signature', verbose_name='Email Signature', blank=True, null=True)
    stay_in_touch_subject = models.CharField(db_column='StayInTouchSubject', max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True, null=True)
    stay_in_touch_signature = models.TextField(db_column='StayInTouchSignature', verbose_name='Stay-in-Touch Email Signature', blank=True, null=True)
    stay_in_touch_note = models.CharField(db_column='StayInTouchNote', max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Mobile', blank=True, null=True)
    alias = models.CharField(db_column='Alias', max_length=8)
    community_nickname = models.CharField(db_column='CommunityNickname', max_length=40, verbose_name='Nickname')
    badge_text = models.CharField(db_column='BadgeText', max_length=80, verbose_name='User Photo badge text overlay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=models.DefaultedOnCreate(False))
    time_zone_sid_key = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Time Zone')  # Too long choices skipped
    # #user_role = models.ForeignKey('UserRole', models.DO_NOTHING, db_column='UserRoleId', verbose_name='Role ID', blank=True, null=True)
    # locale_sid_key = models.CharField(db_column='LocaleSidKey', max_length=40, verbose_name='Locale')  # Too long choices skipped
    # receives_info_emails = models.BooleanField(db_column='ReceivesInfoEmails', verbose_name='Info Emails', default=models.DefaultedOnCreate(False))
    # receives_admin_info_emails = models.BooleanField(db_column='ReceivesAdminInfoEmails', verbose_name='Admin Info Emails', default=models.DefaultedOnCreate(False))
    # email_encoding_key = models.CharField(db_column='EmailEncodingKey', max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    # #profile = models.ForeignKey(Profile, models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID')
    # user_type = models.CharField(db_column='UserType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    # language_locale_key = models.CharField(db_column='LanguageLocaleKey', max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    # employee_number = models.CharField(db_column='EmployeeNumber', max_length=20, blank=True, null=True)
    # #delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, db_column='DelegatedApproverId', verbose_name='Delegated Approver ID', blank=True, null=True)  # Reference to tables [Group, User]
    # manager = models.ForeignKey('self', models.DO_NOTHING, db_column='ManagerId', related_name='user_manager_set', verbose_name='Manager ID', blank=True, null=True)
    # last_login_date = models.DateTimeField(db_column='LastLoginDate', verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # last_password_change_date = models.DateTimeField(db_column='LastPasswordChangeDate', verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    # created_by = models.ForeignKey('self', models.DO_NOTHING, db_column='CreatedById', related_name='user_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    # last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    # last_modified_by = models.ForeignKey('self', models.DO_NOTHING, db_column='LastModifiedById', related_name='user_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    # system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    # number_of_failed_logins = models.IntegerField(db_column='NumberOfFailedLogins', verbose_name='Failed Login Attempts', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # offline_trial_expiration_date = models.DateTimeField(db_column='OfflineTrialExpirationDate', verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # offline_pda_trial_expiration_date = models.DateTimeField(db_column='OfflinePdaTrialExpirationDate', verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # user_permissions_marketing_user = models.BooleanField(db_column='UserPermissionsMarketingUser', verbose_name='Marketing User')
    # user_permissions_offline_user = models.BooleanField(db_column='UserPermissionsOfflineUser', verbose_name='Offline User')
    # user_permissions_avantgo_user = models.BooleanField(db_column='UserPermissionsAvantgoUser', verbose_name='AvantGo User')
    # user_permissions_call_center_auto_login = models.BooleanField(db_column='UserPermissionsCallCenterAutoLogin', verbose_name='Auto-login To Call Center')
    # user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User')
    # user_permissions_interaction_user = models.BooleanField(db_column='UserPermissionsInteractionUser', verbose_name='Flow User')
    # user_permissions_support_user = models.BooleanField(db_column='UserPermissionsSupportUser', verbose_name='Service Cloud User')
    # forecast_enabled = models.BooleanField(db_column='ForecastEnabled', verbose_name='Allow Forecasting', default=models.DefaultedOnCreate(False))
    # user_preferences_activity_reminders_popup = models.BooleanField(db_column='UserPreferencesActivityRemindersPopup', verbose_name='ActivityRemindersPopup')
    # user_preferences_event_reminders_checkbox_default = models.BooleanField(db_column='UserPreferencesEventRemindersCheckboxDefault', verbose_name='EventRemindersCheckboxDefault')
    # user_preferences_task_reminders_checkbox_default = models.BooleanField(db_column='UserPreferencesTaskRemindersCheckboxDefault', verbose_name='TaskRemindersCheckboxDefault')
    # user_preferences_reminder_sound_off = models.BooleanField(db_column='UserPreferencesReminderSoundOff', verbose_name='ReminderSoundOff')
    # user_preferences_disable_all_feeds_email = models.BooleanField(db_column='UserPreferencesDisableAllFeedsEmail', verbose_name='DisableAllFeedsEmail')
    # user_preferences_disable_followers_email = models.BooleanField(db_column='UserPreferencesDisableFollowersEmail', verbose_name='DisableFollowersEmail')
    # user_preferences_disable_profile_post_email = models.BooleanField(db_column='UserPreferencesDisableProfilePostEmail', verbose_name='DisableProfilePostEmail')
    # user_preferences_disable_change_comment_email = models.BooleanField(db_column='UserPreferencesDisableChangeCommentEmail', verbose_name='DisableChangeCommentEmail')
    # user_preferences_disable_later_comment_email = models.BooleanField(db_column='UserPreferencesDisableLaterCommentEmail', verbose_name='DisableLaterCommentEmail')
    # user_preferences_dis_prof_post_comment_email = models.BooleanField(db_column='UserPreferencesDisProfPostCommentEmail', verbose_name='DisProfPostCommentEmail')
    # user_preferences_apex_pages_developer_mode = models.BooleanField(db_column='UserPreferencesApexPagesDeveloperMode', verbose_name='ApexPagesDeveloperMode')
    # user_preferences_receive_no_notifications_as_approver = models.BooleanField(db_column='UserPreferencesReceiveNoNotificationsAsApprover', verbose_name='ReceiveNoNotificationsAsApprover')
    # user_preferences_receive_notifications_as_delegated_approver = models.BooleanField(db_column='UserPreferencesReceiveNotificationsAsDelegatedApprover', verbose_name='ReceiveNotificationsAsDelegatedApprover')
    # user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    # user_preferences_disable_mentions_post_email = models.BooleanField(db_column='UserPreferencesDisableMentionsPostEmail', verbose_name='DisableMentionsPostEmail')
    # user_preferences_dis_mentions_comment_email = models.BooleanField(db_column='UserPreferencesDisMentionsCommentEmail', verbose_name='DisMentionsCommentEmail')
    # user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    # user_preferences_hide_chatter_onboarding_splash = models.BooleanField(db_column='UserPreferencesHideChatterOnboardingSplash', verbose_name='HideChatterOnboardingSplash')
    # user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(db_column='UserPreferencesHideSecondChatterOnboardingSplash', verbose_name='HideSecondChatterOnboardingSplash')
    # user_preferences_dis_comment_after_like_email = models.BooleanField(db_column='UserPreferencesDisCommentAfterLikeEmail', verbose_name='DisCommentAfterLikeEmail')
    # user_preferences_disable_like_email = models.BooleanField(db_column='UserPreferencesDisableLikeEmail', verbose_name='DisableLikeEmail')
    # user_preferences_sort_feed_by_comment = models.BooleanField(db_column='UserPreferencesSortFeedByComment', verbose_name='SortFeedByComment')
    # user_preferences_disable_message_email = models.BooleanField(db_column='UserPreferencesDisableMessageEmail', verbose_name='DisableMessageEmail')
    # user_preferences_disable_bookmark_email = models.BooleanField(db_column='UserPreferencesDisableBookmarkEmail', verbose_name='DisableBookmarkEmail')
    # user_preferences_disable_share_post_email = models.BooleanField(db_column='UserPreferencesDisableSharePostEmail', verbose_name='DisableSharePostEmail')
    # user_preferences_enable_auto_sub_for_feeds = models.BooleanField(db_column='UserPreferencesEnableAutoSubForFeeds', verbose_name='EnableAutoSubForFeeds')
    # user_preferences_disable_file_share_notifications_for_api = models.BooleanField(db_column='UserPreferencesDisableFileShareNotificationsForApi', verbose_name='DisableFileShareNotificationsForApi')
    # user_preferences_show_title_to_external_users = models.BooleanField(db_column='UserPreferencesShowTitleToExternalUsers', verbose_name='ShowTitleToExternalUsers')
    # user_preferences_show_manager_to_external_users = models.BooleanField(db_column='UserPreferencesShowManagerToExternalUsers', verbose_name='ShowManagerToExternalUsers')
    # user_preferences_show_email_to_external_users = models.BooleanField(db_column='UserPreferencesShowEmailToExternalUsers', verbose_name='ShowEmailToExternalUsers')
    # user_preferences_show_work_phone_to_external_users = models.BooleanField(db_column='UserPreferencesShowWorkPhoneToExternalUsers', verbose_name='ShowWorkPhoneToExternalUsers')
    # user_preferences_show_mobile_phone_to_external_users = models.BooleanField(db_column='UserPreferencesShowMobilePhoneToExternalUsers', verbose_name='ShowMobilePhoneToExternalUsers')
    # user_preferences_show_fax_to_external_users = models.BooleanField(db_column='UserPreferencesShowFaxToExternalUsers', verbose_name='ShowFaxToExternalUsers')
    # user_preferences_show_street_address_to_external_users = models.BooleanField(db_column='UserPreferencesShowStreetAddressToExternalUsers', verbose_name='ShowStreetAddressToExternalUsers')
    # user_preferences_show_city_to_external_users = models.BooleanField(db_column='UserPreferencesShowCityToExternalUsers', verbose_name='ShowCityToExternalUsers')
    # user_preferences_show_state_to_external_users = models.BooleanField(db_column='UserPreferencesShowStateToExternalUsers', verbose_name='ShowStateToExternalUsers')
    # user_preferences_show_postal_code_to_external_users = models.BooleanField(db_column='UserPreferencesShowPostalCodeToExternalUsers', verbose_name='ShowPostalCodeToExternalUsers')
    # user_preferences_show_country_to_external_users = models.BooleanField(db_column='UserPreferencesShowCountryToExternalUsers', verbose_name='ShowCountryToExternalUsers')
    # user_preferences_show_profile_pic_to_guest_users = models.BooleanField(db_column='UserPreferencesShowProfilePicToGuestUsers', verbose_name='ShowProfilePicToGuestUsers')
    # user_preferences_show_title_to_guest_users = models.BooleanField(db_column='UserPreferencesShowTitleToGuestUsers', verbose_name='ShowTitleToGuestUsers')
    # user_preferences_show_city_to_guest_users = models.BooleanField(db_column='UserPreferencesShowCityToGuestUsers', verbose_name='ShowCityToGuestUsers')
    # user_preferences_show_state_to_guest_users = models.BooleanField(db_column='UserPreferencesShowStateToGuestUsers', verbose_name='ShowStateToGuestUsers')
    # user_preferences_show_postal_code_to_guest_users = models.BooleanField(db_column='UserPreferencesShowPostalCodeToGuestUsers', verbose_name='ShowPostalCodeToGuestUsers')
    # user_preferences_show_country_to_guest_users = models.BooleanField(db_column='UserPreferencesShowCountryToGuestUsers', verbose_name='ShowCountryToGuestUsers')
    # user_preferences_hide_invoices_redirect_confirmation = models.BooleanField(db_column='UserPreferencesHideInvoicesRedirectConfirmation', verbose_name='HideInvoicesRedirectConfirmation')
    # user_preferences_hide_statements_redirect_confirmation = models.BooleanField(db_column='UserPreferencesHideStatementsRedirectConfirmation', verbose_name='HideStatementsRedirectConfirmation')
    # user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    # user_preferences_disable_endorsement_email = models.BooleanField(db_column='UserPreferencesDisableEndorsementEmail', verbose_name='DisableEndorsementEmail')
    # user_preferences_path_assistant_collapsed = models.BooleanField(db_column='UserPreferencesPathAssistantCollapsed', verbose_name='PathAssistantCollapsed')
    # user_preferences_cache_diagnostics = models.BooleanField(db_column='UserPreferencesCacheDiagnostics', verbose_name='CacheDiagnostics')
    # user_preferences_show_email_to_guest_users = models.BooleanField(db_column='UserPreferencesShowEmailToGuestUsers', verbose_name='ShowEmailToGuestUsers')
    # user_preferences_show_manager_to_guest_users = models.BooleanField(db_column='UserPreferencesShowManagerToGuestUsers', verbose_name='ShowManagerToGuestUsers')
    # user_preferences_show_work_phone_to_guest_users = models.BooleanField(db_column='UserPreferencesShowWorkPhoneToGuestUsers', verbose_name='ShowWorkPhoneToGuestUsers')
    # user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(db_column='UserPreferencesShowMobilePhoneToGuestUsers', verbose_name='ShowMobilePhoneToGuestUsers')
    # user_preferences_show_fax_to_guest_users = models.BooleanField(db_column='UserPreferencesShowFaxToGuestUsers', verbose_name='ShowFaxToGuestUsers')
    # user_preferences_show_street_address_to_guest_users = models.BooleanField(db_column='UserPreferencesShowStreetAddressToGuestUsers', verbose_name='ShowStreetAddressToGuestUsers')
    # user_preferences_lightning_experience_preferred = models.BooleanField(db_column='UserPreferencesLightningExperiencePreferred', verbose_name='LightningExperiencePreferred')
    # user_preferences_preview_lightning = models.BooleanField(db_column='UserPreferencesPreviewLightning', verbose_name='PreviewLightning')
    # user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(db_column='UserPreferencesHideEndUserOnboardingAssistantModal', verbose_name='HideEndUserOnboardingAssistantModal')
    # user_preferences_hide_lightning_migration_modal = models.BooleanField(db_column='UserPreferencesHideLightningMigrationModal', verbose_name='HideLightningMigrationModal')
    # user_preferences_hide_sfx_welcome_mat = models.BooleanField(db_column='UserPreferencesHideSfxWelcomeMat', verbose_name='HideSfxWelcomeMat')
    # user_preferences_hide_bigger_photo_callout = models.BooleanField(db_column='UserPreferencesHideBiggerPhotoCallout', verbose_name='HideBiggerPhotoCallout')
    # user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown')
    # user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown')
    # user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown')
    # user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown')
    # user_preferences_record_home_section_collapse_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeSectionCollapseWTShown', verbose_name='RecordHomeSectionCollapseWTShown')
    # user_preferences_record_home_reserved_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeReservedWTShown', verbose_name='RecordHomeReservedWTShown')
    # user_preferences_favorites_show_top_favorites = models.BooleanField(db_column='UserPreferencesFavoritesShowTopFavorites', verbose_name='FavoritesShowTopFavorites')
    # user_preferences_exclude_mail_app_attachments = models.BooleanField(db_column='UserPreferencesExcludeMailAppAttachments', verbose_name='ExcludeMailAppAttachments')
    # user_preferences_suppress_task_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressTaskSFXReminders', verbose_name='SuppressTaskSFXReminders')
    # user_preferences_suppress_event_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressEventSFXReminders', verbose_name='SuppressEventSFXReminders')
    # user_preferences_preview_custom_theme = models.BooleanField(db_column='UserPreferencesPreviewCustomTheme', verbose_name='PreviewCustomTheme')
    # user_preferences_has_celebration_badge = models.BooleanField(db_column='UserPreferencesHasCelebrationBadge', verbose_name='HasCelebrationBadge')
    # user_preferences_user_debug_mode_pref = models.BooleanField(db_column='UserPreferencesUserDebugModePref', verbose_name='UserDebugModePref')
    # user_preferences_srhoverride_activities = models.BooleanField(db_column='UserPreferencesSRHOverrideActivities', verbose_name='SRHOverrideActivities')
    # user_preferences_new_lightning_report_run_page_enabled = models.BooleanField(db_column='UserPreferencesNewLightningReportRunPageEnabled', verbose_name='NewLightningReportRunPageEnabled')
    # user_preferences_reverse_open_activities_view = models.BooleanField(db_column='UserPreferencesReverseOpenActivitiesView', verbose_name='ReverseOpenActivitiesView')
    # user_preferences_native_email_client = models.BooleanField(db_column='UserPreferencesNativeEmailClient', verbose_name='NativeEmailClient')
    # user_preferences_send_list_email_through_external_service = models.BooleanField(db_column='UserPreferencesSendListEmailThroughExternalService', verbose_name='SendListEmailThroughExternalService')
    # user_preferences_hide_browse_product_redirect_confirmation = models.BooleanField(db_column='UserPreferencesHideBrowseProductRedirectConfirmation', verbose_name='HideBrowseProductRedirectConfirmation')
    # user_preferences_hide_online_sales_app_welcome_mat = models.BooleanField(db_column='UserPreferencesHideOnlineSalesAppWelcomeMat', verbose_name='HideOnlineSalesAppWelcomeMat')
    # contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Employer Team ID', blank=True, null=True)
    # account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Employer Details ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # #call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, db_column='CallCenterId', verbose_name='Call Center ID', blank=True, null=True)
    # extension = models.CharField(db_column='Extension', max_length=40, blank=True, null=True)
    # federation_identifier = models.CharField(db_column='FederationIdentifier', max_length=512, verbose_name='SAML Federation ID', blank=True, null=True)
    # about_me = models.TextField(db_column='AboutMe', blank=True, null=True)
    # full_photo_url = models.URLField(db_column='FullPhotoUrl', verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # small_photo_url = models.URLField(db_column='SmallPhotoUrl', verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # is_ext_indicator_visible = models.BooleanField(db_column='IsExtIndicatorVisible', verbose_name='Show external indicator', sf_read_only=models.READ_ONLY, default=False)
    # out_of_office_message = models.CharField(db_column='OutOfOfficeMessage', max_length=40, verbose_name='Out of office message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # medium_photo_url = models.URLField(db_column='MediumPhotoUrl', verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # digest_frequency = models.CharField(db_column='DigestFrequency', max_length=40, verbose_name='Chatter Email Highlights Frequency', default=models.DefaultedOnCreate('N'), choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    # default_group_notification_frequency = models.CharField(db_column='DefaultGroupNotificationFrequency', max_length=40, verbose_name='Default Notification Frequency when Joining Groups', default=models.DefaultedOnCreate('N'), choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    # last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # banner_photo_url = models.URLField(db_column='BannerPhotoUrl', verbose_name='Url for banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # small_banner_photo_url = models.URLField(db_column='SmallBannerPhotoUrl', verbose_name='Url for IOS banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # medium_banner_photo_url = models.URLField(db_column='MediumBannerPhotoUrl', verbose_name='Url for Android banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # is_profile_photo_active = models.BooleanField(db_column='IsProfilePhotoActive', verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'
